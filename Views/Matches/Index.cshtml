@model IEnumerable<ProjectASP.Models.Match>

<button onclick="loadMatches('ARonde')">A Ronde</button>
<button onclick="loadMatches('BRonde')">B Ronde</button>

<div class="matches-container">
    @foreach (var match in Model)
    {
        var backgroundColor = match.IsPlayed
        ? (match.IsApproved ? "#90EE90" : "#FFD580")
        : "#FFCCCB"; // Lichtgroen voor goedgekeurd, lichtoranje voor ingevuld maar niet goedgekeurd, en lichtrood voor nog niet gespeeld.

        <div class="match-container" >
            <div class="match" style="background-color: @backgroundColor; border: 1px solid @backgroundColor; border-radius: 4px; padding: 10px; margin-bottom: 10px;">
                @if (!match.IsPlayed)
                {
                    <span class="players">@match.PlayerOne<span class="score">[Nog te spelen]  </span> @match.PlayerTwo</span>
                }
                else if (!match.IsApproved)
                {
                    <span class="players">@match.PlayerOne<span class="score">@match.ScorePlayerOne - @match.ScorePlayerTwo [Wacht op goedkeuring]  </span> @match.PlayerTwo</span>
                }
                else
                {
                    <span class="players">@match.PlayerOne<span class="score">@match.ScorePlayerOne - @match.ScorePlayerTwo  </span> @match.PlayerTwo</span>
                }
                <span class="date">@match.Datum.ToString("dd MMM yyyy")</span>

                <div class="buttons-container">
                    @if (!match.IsPlayed || (match.ScorePlayerOne == 0 && match.ScorePlayerTwo == 0))
                    {
                        <button class="btn btn-primary btn-sm" onclick="showScoreInput('@match.PlayerOne', '@match.PlayerTwo', @match.MatchId)">Vul scores in</button>
                    }
                    @if (User.IsInRole("Admin"))
                    {
                        <button class="btn btn-danger btn-sm delete-match-btn" onclick="deleteMatch(@match.MatchId)">Verwijder Match</button>
                        if (!match.IsApproved)
                        {
                            <button class="btn btn-success btn-sm" onclick="approveScores(@match.MatchId)">Goedkeuren</button>
                        }
                    }
                </div>
            </div>
        </div>
    }
</div>


@if (User.IsInRole("Admin"))
{
    <button class="btn btn-primary mb-3" onclick="showAddMatchModal()">Voeg match toe</button>
}

<!-- Modaal venster voor het toevoegen van een nieuwe match -->
<div class="modal fade" id="addMatchModal" tabindex="-1" aria-labelledby="addMatchModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addMatchModalLabel">Voeg match toe</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="addMatchForm">
                    <div class="mb-3">
                        <label for="playerOne" class="form-label">Speler 1</label>
                        <select class="form-select" id="playerOne" name="playerOne">
                            <!-- Opties voor speler 1 worden dynamisch ingevuld -->
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="playerTwo" class="form-label">Speler 2</label>
                        <select class="form-select" id="playerTwo" name="playerTwo">
                            <!-- Opties voor speler 2 worden dynamisch ingevuld -->
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="ronde" class="form-label">Ronde</label>
                        <select class="form-select" id="ronde" name="Ronde">
                            <option value="ARonde" id="ARonde">ARonde</option>
                            <option value="BRonde" id="BRonde">BRonde</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="matchDate" class="form-label">Datum</label>
                        <input type="date" class="form-control" id="matchDate" name="matchDate">
                    </div>
                    <button type="submit" class="btn btn-primary">Match toevoegen</button>
                </form>
            </div>
        </div>
    </div>
</div>


<!-- Modaal venster voor het invullen van scores -->
<div class="modal fade" id="scoreInputModal" tabindex="-1" aria-labelledby="scoreInputModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="scoreInputModalLabel">Scores invullen</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="scoreInputForm">
                    <div class="mb-3">
                        <!-- Hier gebruik je de spelernamen in de label -->
                        <label for="scorePlayerOne" class="form-label">Score voor <span id="playerOneLabel"></span></label>
                        <input type="number" class="form-control" id="scorePlayerOne" name="scorePlayerOne">
                    </div>
                    <div class="mb-3">
                        <!-- Hier gebruik je de spelernamen in de label -->
                        <label for="scorePlayerTwo" class="form-label">Score voor <span id="playerTwoLabel"></span></label>
                        <input type="number" class="form-control" id="scorePlayerTwo" name="scorePlayerTwo">
                    </div>
                    <button type="submit" class="btn btn-primary">Opslaan</button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function showAddMatchModal() {
            $('#addMatchModal').modal('show');
            populateUserDropdowns();
        }

        async function populateUserDropdowns() {
            // Haal gebruikersnamen op uit de database
            const response = await fetch('@Url.Action("GetUsers", "Matches")');
            const users = await response.json(); // Haal de JSON data uit de respons

            // Vul dropdown menu's met gebruikersnamen
            users.forEach(user => {
                $('#playerOne').append($('<option>', {
                    value: user.Id,
                    text: user.firstName + ' ' + user.lastName
                }));
                $('#playerTwo').append($('<option>', {
                    value: user.Id,
                    text: user.firstName + ' ' + user.lastName
                }));
            });
        }

        $('#addMatchForm').submit(async function (event) {
            event.preventDefault();

            const formData = {
                PlayerOne: $('#playerOne').val(),
                PlayerTwo: $('#playerTwo').val(),
                ScorePlayerOne: 0,
                ScorePlayerTwo: 0,
                IsPlayed: false,
                Ronde: $('#ronde').val(), // Haal de geselecteerde waarde van de dropdown "Ronde" op
                Datum: $('#matchDate').val()
            };

            console.log(formData)

            try {
                const response = await fetch('@Url.Action("Add", "Matches")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                });

                if (response.ok) {
                    window.location.href = '@Url.Action("Index", "Matches")';
                } else {
                    console.error('Toevoegen van match is mislukt');
                }
            } catch (error) {
                console.error('Er is een fout opgetreden bij het toevoegen van de match:', error);
            }
        });

        async function deleteMatch(matchId) {
            const confirmation = confirm("Weet je zeker dat je deze match wilt verwijderen?");

            if (confirmation) {
                try {
                    const response = await fetch(`@Url.Action("Delete", "Matches")/${matchId}`, {
                        method: 'DELETE',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });

                    if (response.ok) {
                        alert('Match succesvol verwijderd.');
                        // Herlaad de pagina
                        window.location.reload();
                    } else {
                        console.error('Fout bij het verwijderen van de match.');
                    }
                } catch (error) {
                    console.error('Er is een fout opgetreden bij het verwijderen van de match:', error);
                }
            }
        }

        async function showScoreInput(playerOneName, playerTwoName, matchId) {
            $('#playerOneLabel').text(playerOneName);
            $('#playerTwoLabel').text(playerTwoName);

            $('#scoreInputModal').modal('show');

            $('#scoreInputForm').submit(async function (event) {
                event.preventDefault();

                const scoreData = {
                    MatchId: matchId, 
                    ScorePlayerOne: parseInt($('#scorePlayerOne').val()),
                    ScorePlayerTwo: parseInt($('#scorePlayerTwo').val()),
                    IsPlayed: true
                };
                try {
                    const response = await fetch('@Url.Action("UpdateScores", "Matches")/' + matchId, {
                        method: 'POST', 
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(scoreData)
                    });
                    console.log(response)
                    if (response.ok) {
                        $('#scoreInputModal').modal('hide');
                        window.location.reload();
                    } else {
                        console.error('Bijwerken van scores is mislukt');
                    }
                } catch (error) {
                    console.error('Er is een fout opgetreden bij het bijwerken van de scores:', error);
                }
            });
        }

        async function approveScores(matchId) {
            try {
                const response = await fetch(`@Url.Action("ApproveScores", "Matches")/${matchId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                if (response.ok) {
                    alert('Scores goedgekeurd.');
                    window.location.reload();
                } else {
                    console.error('Fout bij het goedkeuren van de scores.');
                }
            } catch (error) {
                console.error('Er is een fout opgetreden bij het goedkeuren van de scores:', error);
            }
        }

        function loadMatches(ronde) {
            window.location.href = '@Url.Action("Index", "Matches")?ronde=' + ronde;
        }




    </script>
}
